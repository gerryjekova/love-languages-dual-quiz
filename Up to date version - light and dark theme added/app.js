// Translations
const TRANSLATIONS = {
    en: {
        'page-title': 'Love Language Duo Quiz: Giving & Receiving Vibes',
        'header-title': 'üíï Love Language Duo Quiz üíï',
        'header-subtitle': 'Deep dive: 30 questions exploring how you give and receive love ‚Äî ranked results await!',
        'intro-title': 'Welcome to the Love Fest!',
        'intro-text': 'This comprehensive quiz (30 questions total) uncovers how you <strong>give</strong> love (first 15) and <strong>receive</strong> it (next 15). Get ranked scores for all 5 languages, plus insights on your ideal partner match.',
        'btn-start': "Let's Dive In! üöÄ",
        'giving-title': 'Part 1: How You Give Love üåü',
        'giving-subtitle': 'Choose the option that best describes your natural way of showing love and appreciation.',
        'receiving-title': 'Part 2: How You Receive Love üíñ',
        'receiving-subtitle': 'Choose what makes you feel most loved and valued by others.',
        'btn-next': 'Next Question',
        'results-title': 'Your Love Language Profile! üéâ',
        'results-giving-header': 'How You Give Love',
        'results-receiving-header': 'How You Receive Love',
        'insights-header': 'üí° Relationship Insights',
        'btn-retake': 'Take Quiz Again',
        'question-of': 'Question ${current} of 15:',
        'ready-to-start': 'Ready to start!',
        'complete': 'Complete! üéâ',
        'question-progress': 'Question ${current} of ${total}',
        'insight-top-giving': '<strong>Your Top Giving Language:</strong> ${language}<br>You naturally show love through ${languageLower}. This is your instinctive way of expressing care and affection.',
        'insight-top-receiving': '<strong>Your Top Receiving Language:</strong> ${language}<br>You feel most loved when you receive ${languageLower}. This fills your emotional tank.',
        'insight-perfect-symmetry': '<strong>Perfect Symmetry!</strong><br>Your giving and receiving languages match (${language}). You naturally give what you want to receive. Look for partners who also value ${languageLower}, or be patient teaching others how you express love.',
        'insight-golden-rule': '<strong>The Golden Rule vs. The Platinum Rule:</strong><br>You give love through ${givingLower} but receive it best through ${receivingLower}. Remember: your partner might need something different than what you naturally give. The ideal partner gives ${receivingLower} and appreciates receiving ${givingLower}.',
        'insight-tips': '<strong>üí° Relationship Tips:</strong><br>‚Ä¢ Communicate your top receiving language (${receiving}) to your partner clearly<br>‚Ä¢ Don\'t assume your partner wants the same love language you give (${giving})<br>‚Ä¢ Ask your partner to take this quiz too!<br>‚Ä¢ The best relationships have partners who intentionally learn each other\'s languages'
    },
    bg: {
        'page-title': '–¢–µ—Å—Ç –∑–∞ –ï–∑–∏—Ü–∏—Ç–µ –Ω–∞ –õ—é–±–æ–≤—Ç–∞: –î–∞–≤–∞–Ω–µ –∏ –ü–æ–ª—É—á–∞–≤–∞–Ω–µ',
        'header-title': 'üíï –¢–µ—Å—Ç –∑–∞ –ï–∑–∏—Ü–∏—Ç–µ –Ω–∞ –õ—é–±–æ–≤—Ç–∞ üíï',
        'header-subtitle': '–ó–∞–¥—ä–ª–±–æ—á–µ–Ω–æ: 30 –≤—ä–ø—Ä–æ—Å–∞ –∏–∑—Å–ª–µ–¥–≤–∞—Ç –∫–∞–∫ –¥–∞–≤–∞—Ç–µ –∏ –ø–æ–ª—É—á–∞–≤–∞—Ç–µ –ª—é–±–æ–≤ ‚Äî –∫–ª–∞—Å–∏—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –≤–∏ –æ—á–∞–∫–≤–∞—Ç!',
        'intro-title': '–î–æ–±—Ä–µ –¥–æ—à–ª–∏ –≤—ä–≤ –§–µ—Å—Ç–∏–≤–∞–ª–∞ –Ω–∞ –õ—é–±–æ–≤—Ç–∞!',
        'intro-text': '–¢–æ–∑–∏ —Ü—è–ª–æ—Å—Ç–µ–Ω —Ç–µ—Å—Ç (30 –≤—ä–ø—Ä–æ—Å–∞ –æ–±—â–æ) —Ä–∞–∑–∫—Ä–∏–≤–∞ –∫–∞–∫ <strong>–¥–∞–≤–∞—Ç–µ</strong> –ª—é–±–æ–≤ (–ø—ä—Ä–≤–∏—Ç–µ 15) –∏ <strong>–ø–æ–ª—É—á–∞–≤–∞—Ç–µ</strong> —è (—Å–ª–µ–¥–≤–∞—â–∏—Ç–µ 15). –ü–æ–ª—É—á–µ—Ç–µ –∫–ª–∞—Å–∏—Ä–∞–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞ –≤—Å–∏—á–∫–∏—Ç–µ 5 –µ–∑–∏–∫–∞, –ø–ª—é—Å –ø—Ä–æ–∑—Ä–µ–Ω–∏—è –∑–∞ –∏–¥–µ–∞–ª–Ω–∏—è –≤–∏ –ø–∞—Ä—Ç–Ω—å–æ—Ä.',
        'btn-start': '–î–∞ –∑–∞–ø–æ—á–≤–∞–º–µ! üöÄ',
        'giving-title': '–ß–∞—Å—Ç 1: –ö–∞–∫ –¥–∞–≤–∞—Ç–µ –ª—é–±–æ–≤ üåü',
        'giving-subtitle': '–ò–∑–±–µ—Ä–µ—Ç–µ –æ–ø—Ü–∏—è—Ç–∞, –∫–æ—è—Ç–æ –Ω–∞–π-–¥–æ–±—Ä–µ –æ–ø–∏—Å–≤–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–∏—è –≤–∏ –Ω–∞—á–∏–Ω –¥–∞ –ø–æ–∫–∞–∑–≤–∞—Ç–µ –ª—é–±–æ–≤ –∏ –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª–Ω–æ—Å—Ç.',
        'receiving-title': '–ß–∞—Å—Ç 2: –ö–∞–∫ –ø–æ–ª—É—á–∞–≤–∞—Ç–µ –ª—é–±–æ–≤ üíñ',
        'receiving-subtitle': '–ò–∑–±–µ—Ä–µ—Ç–µ –∫–∞–∫–≤–æ –≤–∏ –∫–∞—Ä–∞ –¥–∞ —Å–µ —á—É–≤—Å—Ç–≤–∞—Ç–µ –Ω–∞–π-–æ–±–∏—á–∞–Ω–∏ –∏ —Ü–µ–Ω–µ–Ω–∏ –æ—Ç –¥—Ä—É–≥–∏—Ç–µ.',
        'btn-next': '–°–ª–µ–¥–≤–∞—â –≤—ä–ø—Ä–æ—Å',
        'results-title': '–í–∞—à–∏—è—Ç –ø—Ä–æ—Ñ–∏–ª –Ω–∞ –µ–∑–∏—Ü–∏—Ç–µ –Ω–∞ –ª—é–±–æ–≤—Ç–∞! üéâ',
        'results-giving-header': '–ö–∞–∫ –¥–∞–≤–∞—Ç–µ –ª—é–±–æ–≤',
        'results-receiving-header': '–ö–∞–∫ –ø–æ–ª—É—á–∞–≤–∞—Ç–µ –ª—é–±–æ–≤',
        'insights-header': 'üí° –ü—Ä–æ–∑—Ä–µ–Ω–∏—è –∑–∞ –≤—Ä—ä–∑–∫–∏—Ç–µ',
        'btn-retake': '–†–µ—à–µ—Ç–µ —Ç–µ—Å—Ç–∞ –æ—Ç–Ω–æ–≤–æ',
        'question-of': '–í—ä–ø—Ä–æ—Å ${current} –æ—Ç 15:',
        'ready-to-start': '–ì–æ—Ç–æ–≤–∏ –∑–∞ —Å—Ç–∞—Ä—Ç!',
        'complete': '–ó–∞–≤—ä—Ä—à–µ–Ω–æ! üéâ',
        'question-progress': '–í—ä–ø—Ä–æ—Å ${current} –æ—Ç ${total}',
        'insight-top-giving': '<strong>–í–∞—à–∏—è—Ç —Ç–æ–ø –µ–∑–∏–∫ –Ω–∞ –¥–∞–≤–∞–Ω–µ:</strong> ${language}<br>–í–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–æ –ø–æ–∫–∞–∑–≤–∞—Ç–µ –ª—é–±–æ–≤ —á—Ä–µ–∑ ${languageLower}. –¢–æ–≤–∞ –µ –≤–∞—à–∏—è—Ç –∏–Ω—Å—Ç–∏–Ω–∫—Ç–∏–≤–µ–Ω –Ω–∞—á–∏–Ω –¥–∞ –∏–∑—Ä–∞–∑—è–≤–∞—Ç–µ –≥—Ä–∏–∂–∞ –∏ –æ–±–∏—á.',
        'insight-top-receiving': '<strong>–í–∞—à–∏—è—Ç —Ç–æ–ø –µ–∑–∏–∫ –Ω–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ:</strong> ${language}<br>–ß—É–≤—Å—Ç–≤–∞—Ç–µ —Å–µ –Ω–∞–π-–æ–±–∏—á–∞–Ω–∏, –∫–æ–≥–∞—Ç–æ –ø–æ–ª—É—á–∞–≤–∞—Ç–µ ${languageLower}. –¢–æ–≤–∞ –ø—ä–ª–Ω–∏ –≤–∞—à–∏—è –µ–º–æ—Ü–∏–æ–Ω–∞–ª–µ–Ω —Ä–µ–∑–µ—Ä–≤–æ–∞—Ä.',
        'insight-perfect-symmetry': '<strong>–ü–µ—Ä—Ñ–µ–∫—Ç–Ω–∞ —Å–∏–º–µ—Ç—Ä–∏—è!</strong><br>–í–∞—à–∏—Ç–µ –µ–∑–∏—Ü–∏ –Ω–∞ –¥–∞–≤–∞–Ω–µ –∏ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ —Å—ä–≤–ø–∞–¥–∞—Ç (${language}). –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–æ –¥–∞–≤–∞—Ç–µ —Ç–æ–≤–∞, –∫–æ–µ—Ç–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –ø–æ–ª—É—á–∏—Ç–µ. –¢—ä—Ä—Å–µ—Ç–µ –ø–∞—Ä—Ç–Ω—å–æ—Ä–∏, –∫–æ–∏—Ç–æ —Å—ä—â–æ —Ü–µ–Ω—è—Ç ${languageLower}, –∏–ª–∏ –±—ä–¥–µ—Ç–µ —Ç—ä—Ä–ø–µ–ª–∏–≤–∏, –∫–∞—Ç–æ —É—á–∏—Ç–µ –¥—Ä—É–≥–∏—Ç–µ –∫–∞–∫ –∏–∑—Ä–∞–∑—è–≤–∞—Ç–µ –ª—é–±–æ–≤.',
        'insight-golden-rule': '<strong>–ó–ª–∞—Ç–Ω–æ—Ç–æ –ø—Ä–∞–≤–∏–ª–æ —Å—Ä–µ—â—É –ü–ª–∞—Ç–∏–Ω–µ–Ω–æ—Ç–æ –ø—Ä–∞–≤–∏–ª–æ:</strong><br>–î–∞–≤–∞—Ç–µ –ª—é–±–æ–≤ —á—Ä–µ–∑ ${givingLower}, –Ω–æ —è –ø–æ–ª—É—á–∞–≤–∞—Ç–µ –Ω–∞–π-–¥–æ–±—Ä–µ —á—Ä–µ–∑ ${receivingLower}. –ü–æ–º–Ω–µ—Ç–µ: –≤–∞—à–∏—è—Ç –ø–∞—Ä—Ç–Ω—å–æ—Ä –º–æ–∂–µ –¥–∞ —Å–µ –Ω—É–∂–¥–∞–µ –æ—Ç –Ω–µ—â–æ —Ä–∞–∑–ª–∏—á–Ω–æ –æ—Ç —Ç–æ–≤–∞, –∫–æ–µ—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–æ –¥–∞–≤–∞—Ç–µ. –ò–¥–µ–∞–ª–Ω–∏—è—Ç –ø–∞—Ä—Ç–Ω—å–æ—Ä –¥–∞–≤–∞ ${receivingLower} –∏ —Ü–µ–Ω–∏ –¥–∞ –ø–æ–ª—É—á–∞–≤–∞ ${givingLower}.',
        'insight-tips': '<strong>üí° –°—ä–≤–µ—Ç–∏ –∑–∞ –≤—Ä—ä–∑–∫–∏:</strong><br>‚Ä¢ –°—ä–æ–±—â–µ—Ç–µ —è—Å–Ω–æ –Ω–∞ –ø–∞—Ä—Ç–Ω—å–æ—Ä–∞ —Å–∏ —Ç–æ–ø –µ–∑–∏–∫–∞ —Å–∏ –Ω–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ (${receiving})<br>‚Ä¢ –ù–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–π—Ç–µ, —á–µ –ø–∞—Ä—Ç–Ω—å–æ—Ä—ä—Ç –≤–∏ –∏—Å–∫–∞ —Å—ä—â–∏—è –µ–∑–∏–∫ –Ω–∞ –ª—é–±–æ–≤—Ç–∞, –∫–æ–π—Ç–æ –¥–∞–≤–∞—Ç–µ (${giving})<br>‚Ä¢ –ü–æ–º–æ–ª–µ—Ç–µ –ø–∞—Ä—Ç–Ω—å–æ—Ä–∞ —Å–∏ –¥–∞ –Ω–∞–ø—Ä–∞–≤–∏ —Ç–æ–∑–∏ —Ç–µ—Å—Ç —Å—ä—â–æ!<br>‚Ä¢ –ù–∞–π-–¥–æ–±—Ä–∏—Ç–µ –≤—Ä—ä–∑–∫–∏ –∏–º–∞—Ç –ø–∞—Ä—Ç–Ω—å–æ—Ä–∏, –∫–æ–∏—Ç–æ —Å—ä–∑–Ω–∞—Ç–µ–ª–Ω–æ —É—á–∞—Ç –µ–∑–∏—Ü–∏—Ç–µ –µ–¥–∏–Ω –Ω–∞ –¥—Ä—É–≥'
    }
};

// Main Quiz Application
const app = {
    currentSection: 'intro',
    currentQuestionIndex: 0,
    givingAnswers: [],
    receivingAnswers: [],
    currentLanguage: 'en',
    
    // Initialize the app
    init() {
        this.updateProgress();
        // Load saved language preference
        const savedLang = localStorage.getItem('preferredLanguage') || 'en';
        this.setLanguage(savedLang);
    },
    
    // Set language
    setLanguage(lang) {
        this.currentLanguage = lang;
        localStorage.setItem('preferredLanguage', lang);
        document.documentElement.lang = lang;
        
        // Update button states
        document.getElementById('lang-en').classList.toggle('active', lang === 'en');
        document.getElementById('lang-bg').classList.toggle('active', lang === 'bg');
        
        // Update all translated elements
        this.updateTranslations();
        
        // Re-render current question if in quiz
        if (this.currentSection === 'giving' || this.currentSection === 'receiving') {
            this.renderQuestion();
        }
        
        // Re-render results if on results page
        if (this.currentSection === 'results') {
            this.showResults();
        }
    },
    
    // Update all translations
    updateTranslations() {
        const elements = document.querySelectorAll('[data-i18n]');
        elements.forEach(el => {
            const key = el.getAttribute('data-i18n');
            if (TRANSLATIONS[this.currentLanguage][key]) {
                if (el.tagName === 'TITLE') {
                    el.textContent = TRANSLATIONS[this.currentLanguage][key];
                } else {
                    el.innerHTML = TRANSLATIONS[this.currentLanguage][key];
                }
            }
        });
    },
    
    // Start the quiz
    startQuiz() {
        this.currentSection = 'giving';
        this.showSection('givingQuiz');
        this.renderQuestion();
        this.updateProgress();
    },
    
    // Render current question
    renderQuestion() {
        const questions = this.currentSection === 'giving' ? GIVING_QUESTIONS : RECEIVING_QUESTIONS;
        const question = questions[this.currentQuestionIndex];
        const containerId = this.currentSection === 'giving' ? 'givingQuestion' : 'receivingQuestion';
        const container = document.getElementById(containerId);
        
        const questionText = question.text[this.currentLanguage];
        const questionPrefix = TRANSLATIONS[this.currentLanguage]['question-of'].replace('${current}', this.currentQuestionIndex + 1);
        
        let html = `
            <div class="question-card">
                <div class="question-text">
                    ${questionPrefix} ${questionText}
                </div>
                <div class="options">
        `;
        
        question.options.forEach((option, index) => {
            const optionId = `q${question.id}_option${index}`;
            const optionLabel = option.label[this.currentLanguage];
            html += `
                <div class="option" onclick="app.selectOption('${option.value}', this)">
                    <input type="radio" 
                           name="question${question.id}" 
                           id="${optionId}" 
                           value="${option.value}">
                    <label for="${optionId}">${optionLabel}</label>
                </div>
            `;
        });
        
        html += `
                </div>
            </div>
        `;
        
        container.innerHTML = html;
    },
    
    // Handle option selection
    selectOption(value, element) {
        const allOptions = element.parentElement.querySelectorAll('.option');
        allOptions.forEach(opt => opt.classList.remove('selected'));
        
        element.classList.add('selected');
        
        const radio = element.querySelector('input[type="radio"]');
        radio.checked = true;
        
        this.currentAnswer = value;
        
        const buttonId = this.currentSection === 'giving' ? 'nextGiving' : 'nextReceiving';
        document.getElementById(buttonId).disabled = false;
    },
    
    // Move to next question
    nextQuestion() {
        if (!this.currentAnswer) return;
        
        if (this.currentSection === 'giving') {
            this.givingAnswers.push(this.currentAnswer);
        } else {
            this.receivingAnswers.push(this.currentAnswer);
        }
        
        this.currentAnswer = null;
        this.currentQuestionIndex++;
        
        if (this.currentQuestionIndex >= 15) {
            if (this.currentSection === 'giving') {
                this.currentSection = 'receiving';
                this.currentQuestionIndex = 0;
                this.showSection('receivingQuiz');
                this.renderQuestion();
                document.getElementById('nextReceiving').disabled = true;
            } else {
                this.showResults();
            }
        } else {
            this.renderQuestion();
            const buttonId = this.currentSection === 'giving' ? 'nextGiving' : 'nextReceiving';
            document.getElementById(buttonId).disabled = true;
        }
        
        this.updateProgress();
    },
    
    // Calculate scores from answers
    calculateScores(answers) {
        const scores = { A: 0, B: 0, C: 0, D: 0, E: 0 };
        answers.forEach(answer => {
            scores[answer]++;
        });
        return scores;
    },
    
    // Sort scores and return ranked array
    getRankedScores(scores) {
        return Object.entries(scores)
            .map(([key, value]) => ({ 
                code: key, 
                name: LOVE_LANGUAGES[key][this.currentLanguage], 
                score: value 
            }))
            .sort((a, b) => b.score - a.score);
    },
    
    // Show results section
    showResults() {
        this.currentSection = 'results';
        this.showSection('results');
        
        const givingScores = this.calculateScores(this.givingAnswers);
        const receivingScores = this.calculateScores(this.receivingAnswers);
        
        const givingRanked = this.getRankedScores(givingScores);
        const receivingRanked = this.getRankedScores(receivingScores);
        
        this.renderScoreBars('givingBars', givingRanked);
        this.renderRankedList('givingRanked', givingRanked);
        
        this.renderScoreBars('receivingBars', receivingRanked);
        this.renderRankedList('receivingRanked', receivingRanked);
        
        this.renderInsights(givingRanked, receivingRanked);
        
        this.updateProgress();
    },
    
    // Render score bars
    renderScoreBars(containerId, rankedScores) {
        const container = document.getElementById(containerId);
        let html = '';
        
        rankedScores.forEach(item => {
            const percentage = (item.score / 15) * 100;
            html += `
                <div class="score-container">
                    <div class="score-label">
                        <span>${item.name}</span>
                        <span>${item.score}/15</span>
                    </div>
                    <div class="score-bar">
                        <div class="score-fill" style="width: ${percentage}%">
                            ${percentage > 20 ? Math.round(percentage) + '%' : ''}
                        </div>
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    },
    
    // Render ranked list
    renderRankedList(containerId, rankedScores) {
        const container = document.getElementById(containerId);
        let html = '';
        
        rankedScores.forEach((item, index) => {
            html += `
                <div class="rank-item">
                    <span>
                        <span class="rank-number">#${index + 1}</span>
                        <span class="rank-name">${item.name}</span>
                    </span>
                    <span class="rank-score">${item.score}/15</span>
                </div>
            `;
        });
        
        container.innerHTML = html;
    },
    
    // Generate relationship insights
    renderInsights(givingRanked, receivingRanked) {
        const container = document.getElementById('insights');
        const topGiving = givingRanked[0];
        const topReceiving = receivingRanked[0];
        
        const t = TRANSLATIONS[this.currentLanguage];
        
        let insights = t['insight-top-giving']
            .replace('${language}', topGiving.name)
            .replace('${languageLower}', topGiving.name.toLowerCase());
        
        insights = `<div class="insight">${insights}</div>`;
        
        insights += `<div class="insight">` + t['insight-top-receiving']
            .replace('${language}', topReceiving.name)
            .replace('${languageLower}', topReceiving.name.toLowerCase()) + `</div>`;
        
        if (topGiving.code === topReceiving.code) {
            insights += `<div class="insight">` + t['insight-perfect-symmetry']
                .replace('${language}', topGiving.name)
                .replace('${languageLower}', topGiving.name.toLowerCase()) + `</div>`;
        } else {
            insights += `<div class="insight">` + t['insight-golden-rule']
                .replace('${givingLower}', topGiving.name.toLowerCase())
                .replace('${receivingLower}', topReceiving.name.toLowerCase()) + `</div>`;
        }
        
        insights += `<div class="insight">` + t['insight-tips']
            .replace('${receiving}', topReceiving.name)
            .replace('${giving}', topGiving.name) + `</div>`;
        
        container.innerHTML = insights;
    },
    
    // Show specific section
    showSection(sectionId) {
        document.querySelectorAll('.quiz-section').forEach(section => {
            section.classList.remove('active');
        });
        document.getElementById(sectionId).classList.add('active');
    },
    
    // Update progress bar
    updateProgress() {
        let totalQuestions = 30;
        let completedQuestions = 0;
        
        if (this.currentSection === 'intro') {
            completedQuestions = 0;
        } else if (this.currentSection === 'giving') {
            completedQuestions = this.givingAnswers.length;
        } else if (this.currentSection === 'receiving') {
            completedQuestions = 15 + this.receivingAnswers.length;
        } else if (this.currentSection === 'results') {
            completedQuestions = 30;
        }
        
        const percentage = (completedQuestions / totalQuestions) * 100;
        document.getElementById('progressFill').style.width = percentage + '%';
        
        const t = TRANSLATIONS[this.currentLanguage];
        let stageText = '';
        if (this.currentSection === 'intro') {
            stageText = t['ready-to-start'];
        } else if (this.currentSection === 'results') {
            stageText = t['complete'];
        } else {
            stageText = t['question-progress']
                .replace('${current}', completedQuestions + 1)
                .replace('${total}', totalQuestions);
        }
        
        document.getElementById('stageInfo').textContent = stageText;
    },
    
    // Reset quiz
    resetQuiz() {
        this.currentSection = 'intro';
        this.currentQuestionIndex = 0;
        this.givingAnswers = [];
        this.receivingAnswers = [];
        this.currentAnswer = null;
        
        this.showSection('intro');
        this.updateProgress();
    }
};

// Initialize app when page loads
document.addEventListener('DOMContentLoaded', () => {
    app.init();
});